// Code generated by goyacc -o .\y.go .\yacc.go.y. DO NOT EDIT.

//line .\yacc.go.y:2
package parser

import __yyfmt__ "fmt"

//line .\yacc.go.y:2

import (
	"fmt"
	"github.com/kevinchen147/chinese_compiler/ast"
)

func tokName(c int) string {
	switch c {
	case 0:
		return "EOF"
	case '\n':
		return "\\n"
	}
	i := c - kIF
	if i < 0 || i > len(yyToknames)-1 {
		return fmt.Sprintf("%c", c)
	}
	return yyToknames[i]
}

func addTopLevelStmt(l yyLexer, stmt ast.Node) {
	p := l.(*Parser)
	if p.Tree == nil {
		p.Tree = ast.NewBlock(stmt)
	}
	p.Tree.(*ast.Block).Add(stmt)
}

func defun(l yyLexer, pos *Token, typeSpec baseType, name *Token, params []ast.Node, body ast.Node) {
}

func openBlock(l yyLexer, pos *Token) ast.Node {
	p := l.(*Parser)
	b := ast.NewBlock(pos)
	p.PushBlock(b)
	return b
}

func closeBlock(l yyLexer, block ast.Node, stmts []ast.Node) ast.Node {
	p := l.(*Parser)
	b := p.PopBlock()
	if b != block {
		panic("block stack might be broken")
	}
	b.Append(stmts)
	return b
}

//line .\yacc.go.y:54
type yySymType struct {
	yys      int
	token    *Token
	ident    string
	node     ast.Node
	nodes    []ast.Node
	typeSpec baseType
}

const kIF = 57346
const kELSE = 57347
const kELSIF = 57348
const kSWITCH = 57349
const kCASE = 57350
const kDEFAULT = 57351
const kWHILE = 57352
const kDO = 57353
const kFOR = 57354
const kFOREACH = 57355
const kRETURN = 57356
const kBREAK = 57357
const kCONTINUE = 57358
const kNULL = 57359
const kTRUE = 57360
const kFALSE = 57361
const kTRY = 57362
const kCATCH = 57363
const kFINALLY = 57364
const kTHROW = 57365
const kTHROWS = 57366
const kBOOLEAN = 57367
const kVOID = 57368
const kINT = 57369
const kDOUBLE = 57370
const kSTRING = 57371
const kNATIVE_POINTER = 57372
const kNEW = 57373
const kREQUIRE = 57374
const kRENAME = 57375
const kCLASS = 57376
const kINTERFACE = 57377
const kPUBLIC = 57378
const kPRIVATE = 57379
const kVIRTUAL = 57380
const kOVERRIDE = 57381
const kABSTRACT = 57382
const kTHIS = 57383
const kSUPER = 57384
const kCONSTRUCTOR = 57385
const kINSTANCEOF = 57386
const kDELEGATE = 57387
const kENUM = 57388
const kFINAL = 57389
const kCONST = 57390
const tIS = 57391
const tEQ = 57392
const tNE = 57393
const tGE = 57394
const tLE = 57395
const tADD_A = 57396
const tSUB_A = 57397
const tMUL_A = 57398
const tDIV_A = 57399
const tMOD_A = 57400
const tINC = 57401
const tDEC = 57402
const tDCAST_BEG = 57403
const tDCAST_END = 57404
const tLOG_AND = 57405
const tLOG_OR = 57406
const tINT_LITERAL = 57407
const tDOUBLE_LITERAL = 57408
const tSTRING_LITERAL = 57409
const tREGEXP_LITERAL = 57410
const tIDENT = 57411

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"kIF",
	"kELSE",
	"kELSIF",
	"kSWITCH",
	"kCASE",
	"kDEFAULT",
	"kWHILE",
	"kDO",
	"kFOR",
	"kFOREACH",
	"kRETURN",
	"kBREAK",
	"kCONTINUE",
	"kNULL",
	"kTRUE",
	"kFALSE",
	"kTRY",
	"kCATCH",
	"kFINALLY",
	"kTHROW",
	"kTHROWS",
	"kBOOLEAN",
	"kVOID",
	"kINT",
	"kDOUBLE",
	"kSTRING",
	"kNATIVE_POINTER",
	"kNEW",
	"kREQUIRE",
	"kRENAME",
	"kCLASS",
	"kINTERFACE",
	"kPUBLIC",
	"kPRIVATE",
	"kVIRTUAL",
	"kOVERRIDE",
	"kABSTRACT",
	"kTHIS",
	"kSUPER",
	"kCONSTRUCTOR",
	"kINSTANCEOF",
	"kDELEGATE",
	"kENUM",
	"kFINAL",
	"kCONST",
	"tIS",
	"tEQ",
	"tNE",
	"tGE",
	"tLE",
	"tADD_A",
	"tSUB_A",
	"tMUL_A",
	"tDIV_A",
	"tMOD_A",
	"tINC",
	"tDEC",
	"tDCAST_BEG",
	"tDCAST_END",
	"tLOG_AND",
	"tLOG_OR",
	"tINT_LITERAL",
	"tDOUBLE_LITERAL",
	"tSTRING_LITERAL",
	"tREGEXP_LITERAL",
	"tIDENT",
	"'【'",
	"'。'",
	"'，'",
	"'《'",
	"'》'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'！'",
	"'（'",
	"'）'",
	"'】'",
	"'；'",
	"'：'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line .\yacc.go.y:403

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 37,
}

const yyPrivate = 57344

const yyLast = 284

var yyAct = [...]int{
	51, 153, 18, 6, 5, 45, 4, 147, 55, 163,
	146, 64, 65, 46, 57, 171, 40, 54, 159, 58,
	59, 60, 61, 62, 64, 65, 170, 40, 14, 69,
	15, 16, 17, 63, 40, 162, 40, 164, 139, 21,
	137, 40, 40, 85, 145, 86, 63, 53, 138, 92,
	136, 127, 113, 76, 77, 78, 131, 98, 7, 97,
	101, 102, 103, 104, 105, 106, 109, 84, 9, 10,
	11, 89, 29, 30, 12, 80, 80, 13, 88, 14,
	87, 15, 16, 17, 91, 124, 41, 125, 126, 83,
	32, 128, 46, 160, 129, 132, 80, 74, 75, 82,
	84, 98, 90, 134, 143, 40, 80, 80, 80, 148,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 26,
	27, 28, 83, 19, 142, 140, 72, 73, 144, 24,
	35, 99, 40, 135, 36, 25, 130, 133, 49, 150,
	149, 33, 39, 40, 152, 38, 156, 70, 71, 56,
	46, 158, 157, 53, 151, 161, 53, 141, 34, 66,
	165, 114, 115, 116, 117, 168, 166, 46, 7, 167,
	172, 173, 174, 31, 169, 175, 29, 30, 9, 10,
	11, 3, 29, 30, 12, 48, 22, 13, 7, 14,
	1, 15, 16, 17, 79, 81, 110, 50, 9, 10,
	11, 8, 29, 30, 12, 67, 68, 13, 2, 14,
	37, 15, 16, 17, 93, 94, 118, 119, 108, 29,
	30, 154, 155, 26, 27, 28, 123, 47, 96, 26,
	27, 28, 23, 19, 35, 120, 121, 122, 36, 25,
	35, 111, 112, 100, 36, 25, 20, 95, 52, 26,
	27, 28, 14, 19, 15, 16, 17, 0, 0, 42,
	35, 43, 44, 0, 36, 25, 26, 27, 28, 0,
	47, 0, 0, 0, 0, 0, 0, 35, 0, 0,
	0, 36, 25, 107,
}

var yyPact = [...]int{
	184, 184, -1000, -1000, -1000, 76, 71, 5, 249, 158,
	69, 69, -23, 158, -1000, -1000, -1000, -1000, -1000, -77,
	85, -35, 96, -1000, 155, 158, -1000, -1000, -1000, -1000,
	-1000, 74, 22, -24, -1000, 158, 158, -1000, 18, -1000,
	158, 158, -1, -3, -10, 31, -36, -1000, 13, -1000,
	-22, 193, 164, -1000, 60, -1000, 158, 158, 158, 158,
	158, 158, 158, 201, -1000, -1000, 158, 158, 158, -30,
	158, 158, 158, 158, 158, 158, 158, 158, 158, -1000,
	-48, -1000, 3, -1000, 158, -1000, -31, 158, 158, 67,
	-1000, -1000, -1000, -25, -23, -1000, 54, -1000, 64, -1000,
	96, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -32, -1000,
	155, 74, 74, -1000, 22, 22, 22, 22, -24, -24,
	-1000, -1000, -1000, -34, 86, 55, 33, -23, -38, -74,
	-78, 40, -1000, -1000, -1000, 51, -1000, 158, 83, 227,
	-1000, -1000, -1000, -1000, 216, -23, 158, 158, -64, -1000,
	-1000, -1000, 24, -1000, -23, -46, -1000, -75, -45, -23,
	-1000, -1000, 158, 158, -23, 152, -56, -67, -1000, -23,
	-23, -23, -1000, 216, -1000, -1000,
}

var yyPgo = [...]int{
	0, 6, 248, 0, 1, 5, 3, 2, 246, 186,
	129, 173, 90, 141, 158, 39, 232, 228, 226, 218,
	201, 185, 4, 190, 208, 181,
}

var yyR1 = [...]int{
	0, 23, 23, 24, 24, 22, 22, 22, 22, 25,
	25, 25, 25, 18, 18, 2, 3, 3, 17, 17,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 20, 20, 5,
	5, 21, 21, 6, 6, 7, 7, 7, 7, 7,
	7, 7, 8, 8, 9, 9, 10, 10, 10, 11,
	11, 11, 11, 11, 12, 12, 12, 13, 13, 13,
	13, 14, 14, 14, 15, 15, 15, 15, 15, 16,
	16, 16, 16, 16, 16, 16, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 1, 1, 1, 1, 1, 6,
	5, 6, 5, 2, 4, 1, 2, 3, 1, 2,
	2, 3, 5, 6, 6, 10, 8, 3, 3, 3,
	7, 4, 9, 3, 0, 2, 6, 0, 2, 0,
	1, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 3, 3, 1, 3, 3,
	3, 1, 2, 2, 1, 3, 4, 2, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 3,
}

var yyChk = [...]int{
	-1000, -23, -24, -25, -1, -22, -6, 4, -20, 14,
	15, 16, 20, 23, 25, 27, 28, 29, -7, 69,
	-8, -15, -9, -16, -10, 81, 65, 66, 67, 18,
	19, -11, -12, -13, -14, 76, 80, -24, 69, 71,
	72, 81, 10, 12, 13, -5, -6, 69, -21, 69,
	-21, -3, -2, 70, -6, 85, 64, 49, 54, 55,
	56, 57, 58, 81, 59, 60, 63, 50, 51, -6,
	73, 74, 52, 53, 75, 76, 77, 78, 79, -14,
	-15, -14, 81, 71, 49, -7, -6, 81, 81, 81,
	71, 71, 71, 21, 22, 83, -17, -1, -22, 71,
	-9, -7, -7, -7, -7, -7, -7, 82, -19, -7,
	-10, -11, -11, 82, -12, -12, -12, -12, -13, -13,
	-14, -14, -14, -18, 82, -22, -6, 82, -6, -5,
	69, 81, -3, 83, -1, 69, 82, 72, 82, 72,
	-3, 71, 69, 71, -3, 82, 84, 85, 69, -7,
	-3, 71, -22, -4, 5, 6, -3, -5, -6, 82,
	69, -3, 81, 84, 82, -3, -6, -5, -3, 22,
	82, 82, -3, -3, -3, -4,
}

var yyDef = [...]int{
	37, -2, 1, 3, 4, 0, 0, 0, 0, 39,
	41, 41, 0, 0, 5, 6, 7, 8, 43, 80,
	45, 71, 52, 74, 54, 0, 81, 82, 83, 84,
	85, 56, 59, 64, 67, 0, 0, 2, 0, 20,
	0, 0, 0, 0, 0, 0, 40, 80, 0, 42,
	0, 0, 37, 15, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	71, 73, 0, 21, 0, 44, 0, 0, 39, 0,
	27, 28, 29, 0, 0, 16, 37, 18, 0, 33,
	53, 46, 47, 48, 49, 50, 51, 75, 0, 86,
	55, 57, 58, 79, 60, 61, 62, 63, 65, 66,
	68, 69, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 17, 19, 0, 76, 0, 0, 0,
	10, 12, 13, 22, 34, 0, 39, 0, 0, 87,
	9, 11, 0, 23, 0, 0, 24, 0, 0, 0,
	14, 35, 0, 39, 0, 30, 0, 0, 26, 0,
	0, 0, 32, 34, 25, 36,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 79, 3, 3,
	3, 3, 77, 75, 3, 76, 3, 78,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69,
}

var yyTok3 = [...]int{
	12304, 70, 12290, 71, 65292, 72, 12298, 73, 12299, 74,
	65281, 80, 65288, 81, 65289, 82, 12305, 83, 65307, 84,
	65306, 85, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:88
		{
			addTopLevelStmt(yylex, yyDollar[1].node)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:92
		{
			yyVAL.typeSpec = ttBOOLEAN
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:93
		{
			yyVAL.typeSpec = ttINT
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:94
		{
			yyVAL.typeSpec = ttDOUBLE
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:95
		{
			yyVAL.typeSpec = ttSTRING
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\yacc.go.y:98
		{
			defun(yylex, yyDollar[2].token, yyDollar[1].typeSpec, yyDollar[2].token, yyDollar[4].nodes, yyDollar[6].node)
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\yacc.go.y:102
		{
			defun(yylex, yyDollar[2].token, yyDollar[1].typeSpec, yyDollar[2].token, nil, yyDollar[5].node)
		}
	case 11:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\yacc.go.y:106
		{
			defun(yylex, yyDollar[2].token, yyDollar[1].typeSpec, yyDollar[2].token, yyDollar[4].nodes, nil)
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\yacc.go.y:110
		{
			defun(yylex, yyDollar[2].token, yyDollar[1].typeSpec, yyDollar[2].token, nil, nil)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:115
		{
			yyVAL.nodes = append(make([]ast.Node, 0), ast.NewParam(yyDollar[2].token, newTypeSpec(yyDollar[1].typeSpec), yyDollar[2].token.Value.(string)))
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\yacc.go.y:119
		{
			yyVAL.nodes = append(yyDollar[1].nodes, ast.NewParam(yyDollar[4].token, newTypeSpec(yyDollar[3].typeSpec), yyDollar[4].token.Value.(string)))
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:124
		{
			yyVAL.node = openBlock(yylex, yyDollar[1].token)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:129
		{
			yyVAL.node = closeBlock(yylex, yyDollar[1].node, nil)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:133
		{
			yyVAL.node = closeBlock(yylex, yyDollar[1].node, yyDollar[2].nodes)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:138
		{
			yyVAL.nodes = append(make([]ast.Node, 0), yyDollar[1].node)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:142
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:147
		{
			yyVAL.node = ast.NewExprStmt(yyDollar[2].token, yyDollar[1].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:151
		{
			yyVAL.node = ast.NewDecl(yyDollar[2].token, newTypeSpec(yyDollar[1].typeSpec), yyDollar[2].token.Value.(string), nil)
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line .\yacc.go.y:155
		{
			yyVAL.node = ast.NewDecl(yyDollar[2].token, newTypeSpec(yyDollar[1].typeSpec), yyDollar[2].token.Value.(string), yyDollar[4].node)
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\yacc.go.y:159
		{
			yyVAL.node = ast.NewIf(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\yacc.go.y:163
		{
			yyVAL.node = ast.NewWhile(yyDollar[2].token, yyDollar[1].ident, yyDollar[4].node, yyDollar[6].node)
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
//line .\yacc.go.y:167
		{
			yyVAL.node = ast.NewFor(yyDollar[2].token, yyDollar[1].ident, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node, yyDollar[10].node)
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line .\yacc.go.y:171
		{
			yyVAL.node = ast.NewForeach(yyDollar[2].token, yyDollar[1].ident, yyDollar[4].token.Value.(string), yyDollar[6].node, yyDollar[8].node)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:175
		{
			yyVAL.node = ast.NewReturn(yyDollar[1].token, yyDollar[2].node)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:179
		{
			yyVAL.node = ast.NewBreak(yyDollar[1].token, yyDollar[2].ident)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:183
		{
			yyVAL.node = ast.NewContinue(yyDollar[1].token, yyDollar[2].ident)
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line .\yacc.go.y:187
		{
			yyVAL.node = ast.NewTry(yyDollar[1].token, yyDollar[2].node, yyDollar[5].token.Value.(string), yyDollar[7].node, nil)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\yacc.go.y:191
		{
			yyVAL.node = ast.NewTry(yyDollar[1].token, yyDollar[2].node, "", nil, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
//line .\yacc.go.y:195
		{
			yyVAL.node = ast.NewTry(yyDollar[1].token, yyDollar[2].node, yyDollar[5].token.Value.(string), yyDollar[7].node, yyDollar[9].node)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:199
		{
			yyVAL.node = ast.NewThrow(yyDollar[1].token, yyDollar[2].node)
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\yacc.go.y:204
		{
			yyVAL.node = nil
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:208
		{
			yyVAL.node = yyDollar[2].node
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line .\yacc.go.y:212
		{
			yyVAL.node = ast.NewIf(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\yacc.go.y:217
		{
			yyVAL.ident = ""
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:221
		{
			yyVAL.ident = yyDollar[1].token.Value.(string)
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\yacc.go.y:226
		{
			yyVAL.node = nil
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line .\yacc.go.y:232
		{
			yyVAL.ident = ""
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:236
		{
			yyVAL.ident = yyDollar[1].token.Value.(string)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:242
		{
			yyVAL.node = ast.NewCommaExpr(yyDollar[2].token, yyDollar[1].node, yyDollar[3].node)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:248
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.NORMAL_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:252
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.ADD_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:256
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.SUB_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:260
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.MUL_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:264
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.DIV_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:268
		{
			yyVAL.node = ast.NewAssign(yyDollar[2].token, ast.MOD_ASSIGN, yyDollar[1].node, yyDollar[3].node)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:274
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.LOG_OR, yyDollar[1].node, yyDollar[3].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:280
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.LOG_AND, yyDollar[1].node, yyDollar[3].node)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:286
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.EQ, yyDollar[1].node, yyDollar[3].node)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:290
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.NE, yyDollar[1].node, yyDollar[3].node)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:296
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.GT, yyDollar[1].node, yyDollar[3].node)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:300
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.LT, yyDollar[1].node, yyDollar[3].node)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:304
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.GE, yyDollar[1].node, yyDollar[3].node)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:308
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.LE, yyDollar[1].node, yyDollar[3].node)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:314
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.ADD, yyDollar[1].node, yyDollar[3].node)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:318
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.SUB, yyDollar[1].node, yyDollar[3].node)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:324
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.MUL, yyDollar[1].node, yyDollar[3].node)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:328
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.DIV, yyDollar[1].node, yyDollar[3].node)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:332
		{
			yyVAL.node = ast.NewBinary(yyDollar[2].token, ast.MOD, yyDollar[1].node, yyDollar[3].node)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:338
		{
			yyVAL.node = ast.NewMinusExpr(yyDollar[1].token, yyDollar[2].node)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:342
		{
			yyVAL.node = ast.NewLogNot(yyDollar[1].token, yyDollar[2].node)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:348
		{
			yyVAL.node = ast.NewFuncall(yyDollar[2].token, yyDollar[1].node, nil)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line .\yacc.go.y:352
		{
			yyVAL.node = ast.NewFuncall(yyDollar[2].token, yyDollar[1].node, yyDollar[3].nodes)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:356
		{
			yyVAL.node = ast.NewIncDec(yyDollar[2].token, yyDollar[1].node, ast.INC)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line .\yacc.go.y:360
		{
			yyVAL.node = ast.NewIncDec(yyDollar[2].token, yyDollar[1].node, ast.DEC)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:365
		{
			yyVAL.node = yyDollar[2].node
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:369
		{
			yyVAL.node = ast.NewIdentExpr(yyDollar[1].token, yyDollar[1].token.Value.(string))
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:373
		{
			yyVAL.node = ast.NewIntLiteral(yyDollar[1].token, yyDollar[1].token.Value.(int))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:377
		{
			yyVAL.node = ast.NewDoubleLiteral(yyDollar[1].token, yyDollar[1].token.Value.(float64))
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:381
		{
			yyVAL.node = ast.NewStrLiteral(yyDollar[1].token, yyDollar[1].token.Value.(string))
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:385
		{
			yyVAL.node = ast.NewBooleanLiteral(yyDollar[1].token, true)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:389
		{
			yyVAL.node = ast.NewBooleanLiteral(yyDollar[1].token, false)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line .\yacc.go.y:394
		{
			yyVAL.nodes = append(make([]ast.Node, 0), yyDollar[1].node)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line .\yacc.go.y:398
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
